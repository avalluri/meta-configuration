From 43442ff296d965bc98ac565a85553f3e26fd9313 Mon Sep 17 00:00:00 2001
From: Amarnath Valluri <amarnath.valluri@intel.com>
Date: Wed, 16 Aug 2017 13:56:27 +0300
Subject: [PATCH] support added to execute external command on configuration
 change

A optional value of option '@general[0].command' is executed on change of a
configuration.

Signed-off-by: Amarnath Valluri <amarnath.valluri@intel.com>
---
 libuci.c | 59 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 59 insertions(+)

diff --git a/libuci.c b/libuci.c
index a9e70e8..8cc5f28 100644
--- a/libuci.c
+++ b/libuci.c
@@ -18,6 +18,7 @@
 
 #define _GNU_SOURCE
 #include <sys/types.h>
+#include <unistd.h>
 #include <stdbool.h>
 #include <string.h>
 #include <stdlib.h>
@@ -195,15 +196,73 @@ int uci_list_configs(struct uci_context *ctx, char ***list)
 	return 0;
 }
 
+char ** strtokens(char *str)
+{
+	char **argv = NULL;
+	int i = 0;
+
+	if (!str) return NULL;
+
+	do {
+		char dlm = ' ';
+		char prv = ' ';
+		argv = realloc(argv, (i + 2) * sizeof(char*));
+
+		/* strip leading spaces */
+		while (*str && *str == dlm)
+			str++;
+
+		if (*str && (*str == '\'' || *str == '\"'))
+			dlm = *str++;
+		argv[i++] = str++;
+
+		while (*str && (*str != dlm || prv == '\\'))
+			prv = *str++;
+
+		if (*str) *str++ = '\0';
+
+	} while (*str);
+
+	argv[i] = NULL;
+
+	return argv;
+}
+
 int uci_commit(struct uci_context *ctx, struct uci_package **package, bool overwrite)
 {
 	struct uci_package *p;
+	struct uci_ptr ptr;
+	char *command = NULL;
 	UCI_HANDLE_ERR(ctx);
 	UCI_ASSERT(ctx, package != NULL);
 	p = *package;
 	UCI_ASSERT(ctx, p != NULL);
 	UCI_ASSERT(ctx, p->backend && p->backend->commit);
+
+	/* inform system about the config change */
+    memset(&ptr, 0, sizeof(ptr));
+	ptr.p = p;
+	ptr.section = "@general[0]";
+	ptr.option = "command";
+	ptr.flags = UCI_LOOKUP_EXTENDED;
+	if (!uci_lookup_ptr(ctx, &ptr, NULL, true) &&
+         (ptr.flags & UCI_LOOKUP_COMPLETE) &&
+		 ptr.o && ptr.o->type == UCI_TYPE_STRING &&
+         ptr.o->v.string) {
+		command = strdup(ptr.o->v.string);
+	}
+
 	p->backend->commit(ctx, package, overwrite);
+
+	if (command) {
+		if (fork() == 0) {
+			char **argv = strtokens(command);
+			execvp(argv[0], (char *const *)argv);
+            free(argv);
+		} else {
+			free(command);
+		}
+	}
 	return 0;
 }
 
-- 
2.7.4

